require('dotenv').config();

const Telegraf = require('telegraf').default;
const Stage = require('telegraf/stage');
const session = require('telegraf/session');
const Scene = require('telegraf/scenes/base');

const stage = new Stage();

const bot = new Telegraf(process.env.BOT_TOKEN, { username: 'coronavirus_test_bot' });

const getName = new Scene('getName');
stage.register(getName);
const getBirth = new Scene('getBirth');
stage.register(getBirth);
const getCity = new Scene('getCity');
stage.register(getCity);
const getBloodGroup = new Scene('getBloodGroup');
stage.register(getBloodGroup);
const getBloodRF = new Scene('getBloodRF');
stage.register(getBloodRF);
const getEmail = new Scene('getEmail');
stage.register(getEmail);
const getNumber = new Scene('getNumber');
stage.register(getNumber);
const check = new Scene('check');
stage.register(check);

bot.use(session());
bot.use(stage.middleware());

bot.hears('Ô∏è‚¨ÖÔ∏è –ù–∞ –≥–æ–ª–æ–≤–Ω—É', ctx => {
  ctx.reply(`–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, –í–∞—à—ñ –ø—Ä—ñ–∑–≤–∏—â–µ, —ñ–º'—è —Ç–∞ –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ`, {
    reply_markup: { remove_keyboard: true },
  });
  ctx.scene.enter('getName');
});

bot.start(ctx => {
  ctx.reply(`–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, –í–∞—à—ñ –ø—Ä—ñ–∑–≤–∏—â–µ, —ñ–º'—è —Ç–∞ –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ`, {
    reply_markup: { remove_keyboard: true },
  });
  ctx.scene.enter('getName');
});

getName.command('start', async ctx => {
  ctx.reply(`–ü–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É.\n–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, –í–∞—à—ñ –ø—Ä—ñ–∑–≤–∏—â–µ, —ñ–º'—è —Ç–∞ –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ`, {
    reply_markup: { remove_keyboard: true },
  });
  await ctx.scene.leave('getCity');
  ctx.scene.enter('getName');
});

getName.on('text', async ctx => {
  if (ctx.message.text === '‚óÄÔ∏è –ù–∞–∑–∞–¥') {
    return ctx.reply('–í—ã —É–∂–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–µ –∏–º—è');
  }

  ctx.session.name = ctx.message.text;
  ctx.reply(`–í–∞—à —Ä—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:\n:\n–†–∞–Ω—ñ—à–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:\n–ü.–Ü.–ë.: ${ctx.session.name}`, {
    reply_markup: { keyboard: [['‚óÄÔ∏è –ù–∞–∑–∞–¥']], resize_keyboard: true, one_time_keyboard: true },
  });
  await ctx.scene.leave('getName');
  ctx.scene.enter('getBirth');
});

getBirth.hears(/^[0-9]{4}$/, async ctx => {
  ctx.session.birth = ctx.message.text;
  ctx.reply(
    '–ó —è–∫–æ–≥–æ –í–∏ –º—ñ—Å—Ç–∞/—Å–µ–ª–∞?' +
      `\n\n–†–∞–Ω—ñ—à–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:\n–ü.–Ü.–ë.: ${ctx.session.name};\n–†—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${ctx.session.birth}`,
    {
      reply_markup: {
        keyboard: [['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚ùå –°—Ç–µ—Ä—Ç–∏ –≤—Å–µ!']],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    }
  );
  await ctx.scene.leave('getBirth');
  ctx.scene.enter('getCity');
});

getBirth.hears('‚óÄÔ∏è –ù–∞–∑–∞–¥', async ctx => {
  ctx.reply(`–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, –í–∞—à—ñ –ø—Ä—ñ–∑–≤–∏—â–µ, —ñ–º'—è —Ç–∞ –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ`, {
    reply_markup: { remove_keyboard: true },
  });
  await ctx.scene.leave('getBirth');
  ctx.scene.enter('getName');
});

getBirth.on('text', async ctx => {
  ctx.reply(
    '–í–≤–µ–¥—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ –†—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1990' +
      `\n\n–†–∞–Ω—ñ—à–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:\n–ü.–Ü.–ë.: ${ctx.session.name}`,
    {
      reply_markup: {
        keyboard: [['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚ùå –°—Ç–µ—Ä—Ç–∏ –≤—Å–µ!']],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    }
  );
});

getCity.hears('‚óÄÔ∏è –ù–∞–∑–∞–¥', async ctx => {
  ctx.reply(`–í–≤–µ–¥—ñ—Ç—å –†—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è \n\n–†–∞–Ω—ñ—à–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:\n–ü.–Ü.–ë.: ${ctx.session.name}`, {
    reply_markup: {
      keyboard: [['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚ùå –°—Ç–µ—Ä—Ç–∏ –≤—Å–µ!']],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
  await ctx.scene.leave('getCity');
  ctx.scene.enter('getBirth');
});

getCity.hears(['‚ùå –°—Ç–µ—Ä—Ç–∏ –≤—Å–µ!', '/start'], async ctx => {
  ctx.reply(`–ü–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É.\n–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, –í–∞—à—ñ –ø—Ä—ñ–∑–≤–∏—â–µ, —ñ–º'—è —Ç–∞ –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ`, {
    reply_markup: { remove_keyboard: true },
  });
  await ctx.scene.leave('getCity');
  ctx.scene.enter('getName');
});

getCity.on('text', async ctx => {
  ctx.session.city = ctx.message.text;
  ctx.reply(
    '–Ø–∫–∞ —É –í–∞—Å –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ?' +
      `\n\n–†–∞–Ω—ñ—à–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:\n–ü.–Ü.–ë.: ${ctx.session.name};\n–†—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${ctx.session.birth};\n–ú—ñ—Å—Ç–æ/—Å–µ–ª–æ: ${ctx.session.city}`,
    {
      reply_markup: {
        keyboard: [['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚ùå –°—Ç–µ—Ä—Ç–∏ –≤—Å–µ!']],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    }
  );
  await ctx.scene.leave('getCity');
  ctx.scene.enter('getBloodGroup');
});

getBloodGroup.hears('‚óÄÔ∏è –ù–∞–∑–∞–¥', async ctx => {
  ctx.reply(
    '–Ø–∫–∞ —É –í–∞—Å –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ?' +
      `\n\n–†–∞–Ω—ñ—à–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:\n–ü.–Ü.–ë.: ${ctx.session.name};\n–†—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${ctx.session.birth}`,
    {
      reply_markup: {
        keyboard: [['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚ùå –°—Ç–µ—Ä—Ç–∏ –≤—Å–µ!']],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    }
  );
  await ctx.scene.leave('getBloodGroup');
  ctx.scene.enter('getCity');
});

getBloodGroup.hears(['‚ùå –°—Ç–µ—Ä—Ç–∏ –≤—Å–µ!', '/start'], async ctx => {
  ctx.reply(`–ü–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É.\n–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, –í–∞—à—ñ –ø—Ä—ñ–∑–≤–∏—â–µ, —ñ–º'—è —Ç–∞ –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ`, {
    reply_markup: { remove_keyboard: true },
  });
  await ctx.scene.leave('getBloodGroup');
  ctx.scene.enter('getName');
});

getBloodGroup.on('text', async ctx => {
  ctx.session.bloodgroup = ctx.message.text;
  ctx.reply(
    '–†–µ–∑—É—Å-—Ñ–∞–∫—Ç–æ—Ä:' +
      `\n\n–†–∞–Ω—ñ—à–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:\n–ü.–Ü.–ë.: ${ctx.session.name};\n–†—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${ctx.session.birth};\n–ú—ñ—Å—Ç–æ/—Å–µ–ª–æ: ${ctx.session.city};` +
      `\n–ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ: ${ctx.session.bloodgroup}`,
    {
      reply_markup: {
        keyboard: [['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚ùå –°—Ç–µ—Ä—Ç–∏ –≤—Å–µ!']],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    }
  );
  await ctx.scene.leave('getBloodGroup');
  ctx.scene.enter('getBloodRF');
});

getBloodRF.hears('‚óÄÔ∏è –ù–∞–∑–∞–¥', async ctx => {
  ctx.reply(
    '–Ø–∫–∏–π —É –í–∞—Å —Ä–µ–∑—É—Å-—Ñ–∞–∫—Ç–æ—Ä?' +
      `\n\n–†–∞–Ω—ñ—à–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:\n–ü.–Ü.–ë.: ${ctx.session.name};\n–†—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${ctx.session.birth};\n–ú—ñ—Å—Ç–æ/—Å–µ–ª–æ: ${ctx.session.city};`,
    {
      reply_markup: {
        keyboard: [['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚ùå –°—Ç–µ—Ä—Ç–∏ –≤—Å–µ!']],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    }
  );
  await ctx.scene.leave('getBloodRF');
  ctx.scene.enter('getBloodGroup');
});

getBloodRF.hears(['‚ùå –°—Ç–µ—Ä—Ç–∏ –≤—Å–µ!', '/start'], async ctx => {
  ctx.reply(`–ü–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É.\n–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, –í–∞—à—ñ –ø—Ä—ñ–∑–≤–∏—â–µ, —ñ–º'—è —Ç–∞ –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ`, {
    reply_markup: { remove_keyboard: true },
  });
  await ctx.scene.leave('getBloodRF');
  ctx.scene.enter('getName');
});

getBloodRF.on('text', async ctx => {
  ctx.session.bloodrf = ctx.message.text;
  ctx.reply(
    `–í–∞—à eMail:\n\n–†–∞–Ω—ñ—à–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:\n–ü.–Ü.–ë.: ${ctx.session.name};\n–†—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${ctx.session.birth};\n–ú—ñ—Å—Ç–æ/—Å–µ–ª–æ: ${ctx.session.city};` +
      `\n–ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ: ${ctx.session.bloodgroup};\n–†–µ–∑—É—Å-—Ñ–∞–∫—Ç–æ—Ä: ${ctx.session.bloodrf}`,
    {
      reply_markup: {
        keyboard: [['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚ùå –°—Ç–µ—Ä—Ç–∏ –≤—Å–µ!']],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    }
  );
  await ctx.scene.leave('getBloodRF');
  ctx.scene.enter('getEmail');
});

getEmail.hears('‚óÄÔ∏è –ù–∞–∑–∞–¥', async ctx => {
  ctx.reply(
    '–†–µ–∑—É—Å —Ñ–∞–∫—Ç–æ—Ä' +
      `\n\n–†–∞–Ω—ñ—à–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:\n–ü.–Ü.–ë.: ${ctx.session.name};\n–†—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${ctx.session.birth};\n–ú—ñ—Å—Ç–æ/—Å–µ–ª–æ: ${ctx.session.city};` +
      `\n–ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ: ${ctx.session.bloodgroup}`,
    {
      reply_markup: {
        keyboard: [['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚ùå –°—Ç–µ—Ä—Ç–∏ –≤—Å–µ!']],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    }
  );
  await ctx.scene.leave('getEmail');
  ctx.scene.enter('getBloodRF');
});

getEmail.hears(['‚ùå –°—Ç–µ—Ä—Ç–∏ –≤—Å–µ!', '/start'], async ctx => {
  ctx.reply(`–ü–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É.\n–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, –í–∞—à—ñ –ø—Ä—ñ–∑–≤–∏—â–µ, —ñ–º'—è —Ç–∞ –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ`, {
    reply_markup: { remove_keyboard: true },
  });
  await ctx.scene.leave('getEmail');
  ctx.scene.enter('getName');
});

getEmail.on('text', async ctx => {
  ctx.session.email = ctx.message.text;
  ctx.reply(
    `–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç", —â–æ–±–∏ –º–∏ –º–æ–≥–ª–∏ –∑ –≤–∞–º–∏ –∑–≤'—è–∑–∞—Ç–∏—Å—å` +
      `\n\n–†–∞–Ω—ñ—à–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:\n–ü.–Ü.–ë.: ${ctx.session.name};\n–†—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${ctx.session.birth};\n–ú—ñ—Å—Ç–æ/—Å–µ–ª–æ: ${ctx.session.city};` +
      `\n–ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ: ${ctx.session.bloodgroup};\n–†–µ–∑—É—Å-—Ñ–∞–∫—Ç–æ—Ä: ${ctx.session.bloodrf};\neMail: ${ctx.session.email}`,
    {
      reply_markup: {
        keyboard: [
          [{ text: 'üì± –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç', request_contact: true }],
          ['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚ùå –°—Ç–µ—Ä—Ç–∏ –≤—Å–µ!'],
        ],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    }
  );
  await ctx.scene.leave('getEmail');
  ctx.scene.enter('getNumber');
});

getNumber.hears('‚óÄÔ∏è –ù–∞–∑–∞–¥', async ctx => {
  ctx.reply(
    `eMail:` +
      `\n\n–†–∞–Ω—ñ—à–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:\n–ü.–Ü.–ë.: ${ctx.session.name};\n–†—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${ctx.session.birth};\n–ú—ñ—Å—Ç–æ/—Å–µ–ª–æ: ${ctx.session.city};` +
      `\n–ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ: ${ctx.session.bloodgroup};\n–†–µ–∑—É—Å-—Ñ–∞–∫—Ç–æ—Ä: ${ctx.session.bloodrf}`,
    {
      reply_markup: {
        keyboard: [['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚ùå –°—Ç–µ—Ä—Ç–∏ –≤—Å–µ!']],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    }
  );
  await ctx.scene.leave('getNumber');
  ctx.scene.enter('getEmail');
});

getNumber.hears(['‚ùå –°—Ç–µ—Ä—Ç–∏ –≤—Å–µ!', '/start'], async ctx => {
  ctx.reply(`–ü–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É.\n–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, –í–∞—à—ñ –ø—Ä—ñ–∑–≤–∏—â–µ, —ñ–º'—è —Ç–∞ –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ`, {
    reply_markup: { remove_keyboard: true },
  });
  await ctx.scene.leave('getNumber');
  ctx.scene.enter('getEmail');
  ctx.session = null;
});

getNumber.on('contact', async ctx => {
  ctx.session.phone = ctx.message.contact.phone_number;
  ctx.reply(
    '‚ùóÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –í–∞—à—ñ –¥–∞–Ω—ñ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–í—Å–µ –≤—ñ—Ä–Ω–æ!", —è–∫—â–æ –≤–æ–Ω–∏ –∫–æ—Ä–µ–∫—Ç–Ω—ñ: ' +
      `\n\n–ü.–Ü.–ë.: ${ctx.session.name};\n–†—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${ctx.session.birth};\n–ú—ñ—Å—Ç–æ/—Å–µ–ª–æ: ${ctx.session.city};` +
      `\n–ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ: ${ctx.session.bloodgroup};\n–†–µ–∑—É—Å-—Ñ–∞–∫—Ç–æ—Ä: ${ctx.session.bloodrf};\neMail: ${ctx.session.email};` +
      `\n–ù–æ–º–µ—Ä: ${ctx.session.phone}`,
    {
      reply_markup: {
        keyboard: [['Ô∏è‚úÖ –í—Å–µ –≤—ñ—Ä–Ω–æ!'], ['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚ùå –°—Ç–µ—Ä—Ç–∏ –≤—Å–µ!']],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
      parse_mode: 'markdown',
    }
  );
  await ctx.scene.leave('getNumber');
  ctx.scene.enter('check');
});

check.hears('Ô∏è‚úÖ –í—Å–µ –≤—ñ—Ä–Ω–æ!', ctx => {
  ctx.reply('‚úÖ –î—è–∫—É—î–º–æ! –í–∏ —Ä—è—Ç—É—î—Ç–µ –∂–∏—Ç—Ç—è!', {
    reply_markup: {
      keyboard: [['Ô∏è‚¨ÖÔ∏è –ù–∞ –≥–æ–ª–æ–≤–Ω—É']],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
  ctx.scene.leave('main');

  bot.telegram.sendMessage(
    process.env.ADMIN,
    `–•–æ–ø-—Ö—ç–π-–ª–∞-–ª–∞-–ª—ç–π!!! \n\n–ü.–Ü.–ë.: [${ctx.session.name}](tg://user?id=${ctx.from.id});\n–†—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${ctx.session.birth};\n–ú—ñ—Å—Ç–æ/—Å–µ–ª–æ: ${ctx.session.city};` +
      `\n–ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ: ${ctx.session.bloodgroup};\n–†–µ–∑—É—Å-—Ñ–∞–∫—Ç–æ—Ä: ${ctx.session.bloodrf};\neMail: ${ctx.session.email};` +
      `\n–ù–æ–º–µ—Ä: ${ctx.session.phone}`,
    { parse_mode: 'markdown' }
  );
  ctx.session = null;
});

check.hears('‚óÄÔ∏è –ù–∞–∑–∞–¥', async ctx => {
  ctx.reply(
    '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç" –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º.' +
      `\n\n–†–∞–Ω—ñ—à–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:\n–ü.–Ü.–ë.: ${ctx.session.name};\n–†—ñ–∫ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${ctx.session.birth};\n–ú—ñ—Å—Ç–æ/—Å–µ–ª–æ: ${ctx.session.city};` +
      `\n–ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ: ${ctx.session.bloodgroup};\n–†–µ–∑—É—Å-—Ñ–∞–∫—Ç–æ—Ä: ${ctx.session.bloodrf};\neMail: ${ctx.session.email}`,
    {
      reply_markup: {
        keyboard: [
          [{ text: 'üì± –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç', request_contact: true }],
          ['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚ùå –°—Ç–µ—Ä—Ç–∏ –≤—Å–µ!'],
        ],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    }
  );
  await ctx.scene.leave('check');
  ctx.scene.enter('getNumber');
});

check.hears(['‚ùå –°—Ç–µ—Ä—Ç–∏ –≤—Å–µ!', '/start'], async ctx => {
  ctx.reply(`–ü–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É.\n–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, –í–∞—à—ñ –ø—Ä—ñ–∑–≤–∏—â–µ, —ñ–º'—è —Ç–∞ –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ`, {
    reply_markup: { remove_keyboard: true },
  });
  await ctx.scene.leave('getNumber');
  ctx.scene.enter('getEmail');
  ctx.session = null;
});

bot.startPolling();
