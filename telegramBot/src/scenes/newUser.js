require('dotenv').config();
const { getAdmin, getSecretKey } = require('../config');
const { ageCheck } = require('../helpers/ageChecker');

const Markup = require('telegraf/markup');
const WizardScene = require('telegraf/scenes/wizard');
const validator = require('validator');
const axios = require('axios');

const bot = require('../bot');
const { fullNameValidator } = require('../helpers/fullNameValidator');
// const { setUser } = require('../../../back/src/controller/userHandler');
// const { User } = require('../../../back/src/db/models/');


// const Telegraf = require('telegraf');

// new user registrator five-step wizard
const newUser = new WizardScene(
  'new_user',
  async ctx => {
    // experimental
    await ctx.reply('–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è! –Ø–∫ –í–∞—Å –∑–≤–∞—Ç–∏?\n(<i>–ª–∏—à–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é</i> üá∫üá¶)\n\n –ê–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üì±', {
      reply_markup: {
        keyboard: [[{ text: 'üì≤ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –¥–∞–Ω—ñ –∑ Telegram', request_contact: true }]],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
    return ctx.wizard.next();
    // return ctx.wizard.steps[ctx.wizard.cursor](ctx);
  },
  ctx => {
    if (!ctx.message.contact) {
      if (ctx.message.text.length > 1 && fullNameValidator(ctx.message.text)) {
        ctx.wizard.state.name = ctx.message.text;
        ctx.wizard.next();
        return ctx.wizard.steps[ctx.wizard.cursor](ctx); 
      }
      ctx.reply(`ü§¶‚Äç‚ôÇÔ∏è –ù–µ–º–∞ —Ç–∞–∫–æ–≥–æ —ñ–º'—è.`);
      ctx.wizard.back(); 
      return ctx.wizard.steps[ctx.wizard.cursor](ctx); 
    } else {
      ctx.wizard.state.name = `${ctx.message.contact.first_name} ${ctx.message.contact.last_name}`;
      ctx.wizard.state.phone = ctx.message.contact.phone_number;
      console.log(`ID: ${ctx.message.from.id} USERNAME: ${ctx.message.from.username}`, ctx.message.contact);
      ctx.wizard.next();
      return ctx.wizard.steps[ctx.wizard.cursor](ctx); 
    }
    
  },
  ctx => {
    ctx.reply(`–ó–≤—ñ–¥–∫–∏ –í–∏? `);
    return ctx.wizard.next();
  },
  ctx => {

    if (ctx.message.text.length > 2 && fullNameValidator(ctx.message.text)) {
      ctx.wizard.state.locality = ctx.message.text;
      ctx.wizard.next();
      return ctx.wizard.steps[ctx.wizard.cursor](ctx); 
    }
    ctx.reply(`ü§¶‚Äç‚ôÇÔ∏è –ù–µ–º–∞ —Ç–∞–∫–æ–≥–æ locality.`);
    ctx.wizard.back(); 
    return ctx.wizard.steps[ctx.wizard.cursor](ctx);
  },
  ctx => {
    ctx.reply(`–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, email:`);
    return ctx.wizard.next();
  },
  ctx => {
    console.log(ctx.message.text);
    if (validator.isEmail(ctx.message.text)) {
      ctx.wizard.state.email = ctx.message.text;
      ctx.wizard.next();
      return ctx.wizard.steps[ctx.wizard.cursor](ctx); 
    }
    ctx.reply(`ü§¶‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–≥–æ email –Ω–µ —ñ—Å–Ω—É—î!`);
    ctx.wizard.back(); 
    return ctx.wizard.steps[ctx.wizard.cursor](ctx); 
  },
  ctx => {
    ctx.reply(`üîû –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, –¥–∞—Ç—É –í–∞—à–æ–≥–æ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:\n(—É —Ñ–æ—Ä–º–∞—Ç—ñ: MM.DD.YYYY)`);
    return ctx.wizard.next();
  },
  ctx => {
    console.log(ctx.message.text);
    ctx.wizard.state.dob = validator.toDate(ctx.message.text);
    if (!ctx.wizard.state.dob) {
      ctx.reply(`–î—É–º–∞—î—à, —Ü–µ —Å–º—ñ—à–Ω–æ?\n–í –º–µ–Ω–µ –Ω–µ–º–∞—î —á–∞—Å—É –Ω–∞ —ñ–≥—Ä–∏!`);
      ctx.wizard.back(); 
      return ctx.wizard.steps[ctx.wizard.cursor](ctx);
    }
    if (ageCheck(ctx.wizard.state.dob) < 18) {
      ctx.reply('üîû –°–µ—Ä–≤—ñ—Å –ª–∏—à–µ –¥–ª—è –ø–æ–≤–Ω–æ–ª—ñ—Ç–Ω—ñ—Ö. –ß–µ–∫–∞—î–º–æ –í–∞—Å –∑–Ω–æ–≤—É!');
      return ctx.scene.leave();
    }

    ctx.wizard.next();
    return ctx.wizard.steps[ctx.wizard.cursor](ctx);
  },
  ctx => {
    console.log(ctx.wizard.state.dob);
    ctx.reply(
      `–ù—É —ñ –Ω–∞–π–≥–æ–ª–æ–≤–Ω—ñ—à–µ: \n—è–∫–∞ —É –í–∞—Å –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ?`,
      Markup.keyboard([
        ['1', '2'],
        ['3', '4'],
      ])
        .resize()
        .removeKeyboard()
        .extra()
    );
    return ctx.wizard.next();
  },
  ctx => {
    if (
      ctx.message.text === '1' ||
      ctx.message.text === '2' ||
      ctx.message.text === '3' ||
      ctx.message.text === '4'
    ) {
      ctx.wizard.next();
      return ctx.wizard.steps[ctx.wizard.cursor](ctx);
    }
    ctx.wizard.back();
    return ctx.wizard.steps[ctx.wizard.cursor](ctx);
  },
  ctx => {
    ctx.wizard.state.bloodType = ctx.message.text;
    console.log(ctx.wizard.state.bloodType);
    ctx.reply(
      `–í–∞—à —Ä–µ–∑—É—Å-—Ñ–∞–∫—Ç–æ—Ä?`,
      Markup.keyboard([['+', '-']])
        .resize()
        .removeKeyboard()
        .extra()
    );
    return ctx.wizard.next();
  },
  ctx => {
    if (ctx.message.text === '+' || ctx.message.text === '-') {
      ctx.wizard.next();
      return ctx.wizard.steps[ctx.wizard.cursor](ctx);
    }
    ctx.wizard.back();
    return ctx.wizard.steps[ctx.wizard.cursor](ctx);
  },
  ctx => {
    ctx.wizard.state.rhesus = ctx.message.text;
    console.log(ctx.wizard.state.rhesus);

    ctx.wizard.next();
    return ctx.wizard.steps[ctx.wizard.cursor](ctx);
  },
  ctx => {
    ctx.reply(
      `–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –í–∞—à—ñ –¥–∞–Ω—ñ:
    –Ü–º'—è: ${ctx.wizard.state.name}
    –¢–µ–ª–µ—Ñ–æ–Ω: ${ctx.wizard.state.phone}
    –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${ctx.wizard.state.dob}
    –ï–ª.–ø–æ—à—Ç–∞: ${ctx.wizard.state.email}
    –ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ: ${ctx.wizard.state.bloodType}
    –†–µ–∑—É—Å-—Ñ–∞–∫—Ç–æ—Ä: ${ctx.wizard.state.rhesus}`,
      Markup.keyboard([Markup.button('‚úÖ –í—Å–µ –≤—ñ—Ä–Ω–æ!'), Markup.button('‚ùå –°–ø–æ—á–∞—Ç–∫—É')])
        .resize()
        .removeKeyboard()
        .extra(),
    );
    return ctx.wizard.next();
    // return ctx.wizard.steps[ctx.wizard.cursor](ctx);
  },
  ctx => {
    if (ctx.message.text !== '‚úÖ –í—Å–µ –≤—ñ—Ä–Ω–æ!') {
      ctx.wizard.selectStep(0);
      return ctx.wizard.steps[ctx.wizard.cursor](ctx);
    }
    ctx.wizard.next();
    return ctx.wizard.steps[ctx.wizard.cursor](ctx);
  },
  async ctx => {
    const user = {
      fullName: ctx.wizard.state.name,
      dateOfBirth: ctx.wizard.state.dob,
      phoneNumber: ctx.wizard.state.phone,
      email: ctx.wizard.state.email,
      bloodType: ctx.wizard.state.bloodType,
      rhesus: ctx.wizard.state.rhesus,
      locality: ctx.wizard.state.locality,
      telegramId: ctx.from.id,
    };
    console.log('<< USER >>', user);
    const response = await axios({
      method: "POST",
      url: 'http://nodejs:3000/user',
      json: true,
      headers: {
        'Authorization': getSecretKey(),
      },
      data: user,
    });
    console.log('NEW USER RESPONSE FROM BACK:', response.data);
    // await setUser(user);
    
    await ctx.replyWithHTML(
      `üéâ –í—ñ—Ç–∞—î–º–æ, ${ctx.wizard.state.name}! üéâ \n–í–∏ —Å—Ç–∞–ª–∏ —É—á–∞—Å–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç—É! üíâ\nT–∏—Å–Ω–∏ /main –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.`,
      Markup.removeKeyboard().extra()
    );

    bot.telegram.sendMessage(
      getAdmin(),
      `
    –Ü–º'—è: ${ctx.wizard.state.name}
    –¢–µ–ª–µ—Ñ–æ–Ω: ${ctx.wizard.state.phone}
    –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${ctx.wizard.state.dob}
    –ï–ª.–ø–æ—à—Ç–∞: ${ctx.wizard.state.email}
    –ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ: ${ctx.wizard.state.bloodType}
    –†–µ–∑—É—Å-—Ñ–∞–∫—Ç–æ—Ä: ${ctx.wizard.state.rhesus}`
    );
    //
    // sharing ctx.wizard.state to DB with await
    //
    return ctx.scene.leave();
  }
);

module.exports = {
  newUser,
};
