require('dotenv').config();
const Markup = require('telegraf/markup');
const WizardScene = require('telegraf/scenes/wizard');
const bot = require('../bot');
const validator = require('validator');
// const Telegraf = require('telegraf');


// new user registrator five-step wizard
const newUser = new WizardScene(
  'new_user',
  ctx => {
    ctx.reply(`–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è! –Ø–∫ –í–∞—Å –∑–≤–∞—Ç–∏?`);
    return ctx.wizard.next();
  },
  ctx => {
    if (ctx.message.text.length < 4) {      
      ctx.reply(`ü§¶‚Äç‚ôÇÔ∏è –ù–µ–º–∞ —Ç–∞–∫–æ–≥–æ —ñ–º'—è.`);
      ctx.wizard.back();  // Set the listener to the previous function
      return ctx.wizard.steps[ctx.wizard.cursor](ctx);  // Manually trigger the listener with the current ctx

    } else {
      ctx.wizard.state.name = ctx.message.text;
      ctx.wizard.next();
      return ctx.wizard.steps[ctx.wizard.cursor](ctx);  // Manually trigger the listener with the current ctx

    }
  },
  ctx => {
    ctx.reply(`–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, email:`);
    return ctx.wizard.next();

  },
  ctx => {
    console.log(ctx.message.text);
    if (validator.isEmail(ctx.message.text)) {
      ctx.wizard.state.email = ctx.message.text;  
      ctx.wizard.next();
      return ctx.wizard.steps[ctx.wizard.cursor](ctx);  // Manually trigger the listener with the current ctx
    } else {
      ctx.reply(`ü§¶‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–≥–æ email –Ω–µ —ñ—Å–Ω—É—î! \n–ù–µ —Ä–∞–¥–∂—É –≥—Ä–∞—Ç–∏—Å—è –∑—ñ –º–Ω–æ—é, –¥—Ä—É–∂–µ!`);
      ctx.wizard.back();  // Set the listener to the previous function
      return ctx.wizard.steps[ctx.wizard.cursor](ctx);  // Manually trigger the listener with the current ctx
    }
  },
  ctx => {
    ctx.reply(`üîû –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, –¥–∞—Ç—É –í–∞—à–æ–≥–æ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:\n(—É —Ñ–æ—Ä–º–∞—Ç—ñ: MM.DD.YYYY)`);
    return ctx.wizard.next();
  },
  ctx => {
    console.log(ctx.message.text);
    ctx.wizard.state.dob = validator.toDate(ctx.message.text);
    if (!ctx.wizard.state.dob) {
      ctx.reply(`–î—É–º–∞—î—à, —Ü–µ —Å–º—ñ—à–Ω–æ?\n–í –º–µ–Ω–µ –Ω–µ–º–∞—î —á–∞—Å—É –Ω–∞ —ñ–≥—Ä–∏!`);
      ctx.wizard.back();  // Set the listener to the previous function
      return ctx.wizard.steps[ctx.wizard.cursor](ctx);
    };
    ctx.wizard.next();
    return ctx.wizard.steps[ctx.wizard.cursor](ctx);
  },
  ctx => {
    console.log(ctx.wizard.state.dob);
    ctx.reply(`–ù—É —ñ –Ω–∞–π–≥–æ–ª–æ–≤–Ω—ñ—à–µ: \n—è–∫–∞ —É –í–∞—Å —Ä—É–ø–∞ –∫—Ä–æ–≤—ñ?`, Markup.keyboard([
      Markup.button('1'),
      Markup.button('2'),
      Markup.button('3'),
      Markup.button('4'),
    ]).resize().extra());
    return ctx.wizard.next();
  },
  ctx => {
    ctx.wizard.state.bloodType = ctx.message.text;
    console.log(ctx.wizard.state.bloodType);
    ctx.reply(`–í—Ç–æ–º–∏–≤—Å—è!? –ù—ñ—Ö—Ç–æ –Ω–µ –æ–±—ñ—Ü—è–≤, —â–æ –±—É–¥–µ –ª–µ–≥–∫–æ.\n–û—Å—Ç–∞–Ω–Ω—î –ø–∏—Ç–∞–Ω–Ω—è: –í–∞—à —Ä–µ–∑—É—Å-—Ñ–∞–∫—Ç–æ—Ä?`, Markup.keyboard([      
      Markup.button('+'),
      Markup.button('-'),
    ]).resize().extra());
    return ctx.wizard.next();
  },
  ctx => {  
    ctx.wizard.state.rhesus = ctx.message.text;
    console.log(ctx.wizard.state.rhesus);
    ctx.reply('–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± —è –¥—ñ–∑–Ω–∞–≤—Å—è –Ω–æ–º–µ—Ä —Ç–≤–æ–≥–æ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ üì±', { 
      reply_markup: { 
        keyboard: [[{text: 'üì≤ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact: true}]],
        resize_keyboard: true,
        one_time_keyboard: true, 
      },
    });
    return ctx.wizard.next();
  },
  ctx => {
    ctx.wizard.state.phone = ctx.message.contact.phone_number;

    ctx.reply(
      `–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –í–∞—à—ñ –¥–∞–Ω—ñ:
    –Ü–º'—è: ${ctx.wizard.state.name}
    –¢–µ–ª–µ—Ñ–æ–Ω: ${ctx.wizard.state.phone}
    –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${ctx.wizard.state.dob}
    –ï–ª.–ø–æ—à—Ç–∞: ${ctx.wizard.state.email}
    –ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ: ${ctx.wizard.state.bloodType}
    –†–µ–∑—É—Å-—Ñ–∞–∫—Ç–æ—Ä: ${ctx.wizard.state.rhesus}`,
      Markup.keyboard([      
        Markup.button('‚úÖ –í—Å–µ –≤—ñ—Ä–Ω–æ!'),
        Markup.button('‚ùå –°–ø–æ—á–∞—Ç–∫—É'),
      ]).resize().extra(),
      { parse_mode: 'markdown' }
      );
    return ctx.wizard.next();
    // return ctx.wizard.steps[ctx.wizard.cursor](ctx);

  },
  ctx => {
    if (ctx.message.text == '‚ùå –°–ø–æ—á–∞—Ç–∫—É') {
      ctx.wizard.selectStep(0);
      return ctx.wizard.steps[ctx.wizard.cursor](ctx);
    }; 
    ctx.wizard.next();
    return ctx.wizard.steps[ctx.wizard.cursor](ctx);
  },
  async ctx => {
    await ctx.replyWithDice();
    console.log(ctx.wizard.state);
    await ctx.replyWithHTML(`üéâ –í—ñ—Ç–∞—î–º–æ, ${ctx.wizard.state.name}! üéâ \n–í–∏ —Å—Ç–∞–ª–∏ —É—á–∞—Å–Ω–∏–∫–æ–º –ø—Ä–æ–µ–∫—Ç—É! üíâ`)
    bot.telegram.sendMessage(process.env.ADMIN, `
    –Ü–º'—è: ${ctx.wizard.state.name}
    –¢–µ–ª–µ—Ñ–æ–Ω: ${ctx.wizard.state.phone}
    –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${ctx.wizard.state.dob}
    –ï–ª.–ø–æ—à—Ç–∞: ${ctx.wizard.state.email}
    –ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ: ${ctx.wizard.state.bloodType}
    –†–µ–∑—É—Å-—Ñ–∞–∫—Ç–æ—Ä: ${ctx.wizard.state.rhesus}`,
    );
    // 
    // sharing ctx.wizard.state to DB with await
    // 
    return ctx.scene.leave();
  },
  
);

module.exports = {
  newUser,
};
