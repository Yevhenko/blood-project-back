require('dotenv').config();
const Markup = require('telegraf/markup');
const WizardScene = require('telegraf/scenes/wizard');
const bot = require('../bot');
const axios = require('axios');
// const Telegraf = require('telegraf');

const { getAdmin, getSecretKey } = require('../config');

const { logger } = require('../logger');
const log = logger(__filename);

// new user registrator five-step wizard
const createDemand = new WizardScene(
  'create_demand',
  
  async ctx => {
    try {
      const { data: currentUser } = await axios({
        method: "GET",
        url: `http://nodejs:3000/user?telegramId=${ctx.from.id}`,
        headers: {
          'Authorization': getSecretKey(),
        }
      });  
      log.info(`üî∂ RESPONSE FROM BACK >>>:`);
      log.info(currentUser);
  
      if (!currentUser){
        ctx.reply(`–í—ñ—Ç–∞—é –í–∞—Å! –í–∏ —Ç—É—Ç –≤–ø–µ—Ä—à–µ, —Ç–æ–º—É –ø—Ä–æ–π–¥—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, –±—É–¥—å-–ª–∞—Å–∫–∞, –ø—ñ—Å–ª—è —á–æ–≥–æ –í–∞–º –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–º —É–≤–µ—Å—å —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª.`, ctx.scene.enter('new_user'));
        return;
      };

      ctx.wizard.state.currentUser = currentUser;
      ctx.wizard.next();
      return ctx.wizard.steps[ctx.wizard.cursor](ctx);
    } catch (error) {
      log.error('üî¥ bot create_demand  error -', error);
    }
  },

  ctx => {
    ctx.reply(`–í–∏ –≤–∏—Ä—ñ—à–∏–ª–∏ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–Ω–æ—Ä—Å—å–∫—É –∫—Ä–æ–≤, —è –í–∞–º —ñ–∑ —Ü–∏–º –¥–æ–ø–æ–º–æ–∂—É.`);
    ctx.wizard.next();
    return ctx.wizard.steps[ctx.wizard.cursor](ctx);
  },
  ctx => {
    ctx.reply(`–ü–æ—á–Ω–µ–º–æ –∑ –Ω–∞–π–≥–æ–ª–æ–≤–Ω—ñ—à–æ–≥–æ: \n–∫—Ä–æ–≤ —è–∫–æ—ó –≥—Ä—É–ø–∏ –í–∏ –ø–æ—Ç—Ä–µ–±—É—î—Ç–µ?`, Markup.keyboard([
      ['1', '2'],
      ['3', '4']
    ]).oneTime().resize().extra());
    return ctx.wizard.next();
  },
  ctx => {
    if (ctx.message.text == '1' || ctx.message.text == '2' || ctx.message.text == '3' || ctx.message.text == '4') {
      ctx.wizard.next();
      return ctx.wizard.steps[ctx.wizard.cursor](ctx);
    } else {
      ctx.wizard.back();
      return ctx.wizard.steps[ctx.wizard.cursor](ctx);
    }
  },
  ctx => {
    ctx.wizard.state.bloodType = ctx.message.text;
    log.info(ctx.wizard.state.bloodType);
    ctx.reply(`–ê —Ä–µ–∑—É—Å-—Ñ–∞–∫—Ç–æ—Ä?`, Markup.keyboard([      
      [Markup.button('+'), Markup.button('-')]
    ]).resize().removeKeyboard().extra());
    return ctx.wizard.next();
  },
  ctx => {
    if (ctx.message.text == '+' || ctx.message.text == '-') {
      ctx.wizard.next();
      return ctx.wizard.steps[ctx.wizard.cursor](ctx);
    } else {
      ctx.reply('–õ–∏—à–µ + –∞–±–æ - ', Markup.removeKeyboard().extra());
      ctx.wizard.back();
      return ctx.wizard.steps[ctx.wizard.cursor](ctx);
    }
  },
  ctx => {  
    ctx.wizard.state.rhesus = ctx.message.text;
    log.info(ctx.wizard.state.rhesus);
    ctx.reply('–†–æ–∑–∫–∞–∂—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, –¥–ª—è —á–æ–≥–æ –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–Ω–æ—Ä—Å—å–∫–∞ –∫—Ä–æ–≤, –∞ —Ç–∞–∫–æ–∂ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é:', Markup.removeKeyboard().extra());
    return ctx.wizard.next();
    // return ctx.wizard.steps[ctx.wizard.cursor](ctx);
  },
  ctx => {
    ctx.wizard.state.reason = ctx.message.text;
    log.info(ctx.wizard.state.reason);

    ctx.replyWithMarkdown(
      `*–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –í–∞—à—ñ –¥–∞–Ω—ñ*:

    –ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ: ${ctx.wizard.state.bloodType}
    –†–µ–∑—É—Å-—Ñ–∞–∫—Ç–æ—Ä: ${ctx.wizard.state.rhesus}
    –ú–µ—Ç–∞: ${ctx.wizard.state.reason}`,
    Markup.keyboard([      
      Markup.button('‚úÖ –í—Å–µ –≤—ñ—Ä–Ω–æ!'),
      Markup.button('‚ùå –°–ø–æ—á–∞—Ç–∫—É'),
    ])
      .resize()
      .removeKeyboard()
      .extra(),
      { parse_mode: 'markdown' }
    );
    return ctx.wizard.next();
    // return ctx.wizard.steps[ctx.wizard.cursor](ctx);

  },
  ctx => {
    if (ctx.message.text == '‚ùå –°–ø–æ—á–∞—Ç–∫—É') {
      ctx.wizard.selectStep(0);
      return ctx.wizard.steps[ctx.wizard.cursor](ctx);
    }; 
    ctx.wizard.next();
    return ctx.wizard.steps[ctx.wizard.cursor](ctx);
  },
  async ctx => {
    await ctx.replyWithHTML(`üíâ`, Markup.removeKeyboard().extra());
    log.info(ctx.wizard.state);

    const demand = {
      fullName: ctx.wizard.state.currentUser.fullName,
      phoneNumber: ctx.wizard.state.currentUser.phoneNumber,
      locality: ctx.wizard.state.currentUser.locality,
      bloodType: ctx.wizard.state.bloodType,
      rhesus: ctx.wizard.state.rhesus,
      reason: ctx.wizard.state.reason,
      // id: ctx.wizard.state.currentUser.id,
    }
    log.info(demand);

    const response = await axios({
      method: 'POST',
      url: `http://nodejs:3000/demand?userId=${ctx.wizard.state.currentUser.id}`,
      json: true,
      headers: { 'Authorization': getSecretKey() },
      // context: { 'user': { 'id': ctx.wizard.state.currentUser.id } },
      data: demand,

    });
    log.info(` üîµ CREATE DEMAND RESPONSE FROM BACK:`);
    log.info(response.data);

    await ctx.replyWithHTML(`üéâ –í—ñ—Ç–∞—é! üéâ \n–ó–∞—è–≤–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ! üíâ\nT–∏—Å–Ω–∏ /main –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.`);
    
    // Sending message to admin
    bot.telegram.sendMessage(getAdmin(), `
    –ó–∞—è–≤–∫–∞ –≤—ñ–¥: ${ctx.from.first_name} ${ctx.from.last_name}
    Telegram ID: ${ctx.from.id}
    –ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ: ${ctx.wizard.state.bloodType}
    –†–µ–∑—É—Å-—Ñ–∞–∫—Ç–æ—Ä: ${ctx.wizard.state.rhesus}
    –ú–µ—Ç–∞: ${ctx.wizard.state.reason}`,
    );
    // Scene exit
    return ctx.scene.leave();
  }
);

module.exports = {
  createDemand,
};
