/* eslint-disable no-plusplus */
/* eslint-disable arrow-parens */
require('dotenv').config();

const Telegraf = require('telegraf');
const Composer = require('telegraf/composer');
const session = require('telegraf/session');
const Stage = require('telegraf/stage');
const Markup = require('telegraf/markup');
const WizardScene = require('telegraf/scenes/wizard');

const stepHandler = new Composer();
stepHandler.action('next', ctx => {
  ctx.reply('–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä! –ï—â–µ –±—É—Ö–Ω–µ—à—å?');
  return ctx.wizard.next();
});
stepHandler.command('next', ctx => {
  ctx.reply('–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä');
  return ctx.wizard.next();
});
stepHandler.use(ctx => ctx.replyWithMarkdown('–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É!'));

const superWizard = new WizardScene(
  'super-wizard',
  ctx => {
    ctx.reply(
      '–ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—Ç–µ?',
      Markup.inlineKeyboard([
        // Markup.urlButton('‚ù§Ô∏è', 'http://telegraf.js.org'),
        Markup.callbackButton('üç∫', 'next'),
        Markup.callbackButton('üç∑', 'next'),
        Markup.callbackButton('ü•É', 'next'),
        // Markup.callbackButton('‚û°Ô∏è Next', 'next'),
      ]).extra()
    );
    return ctx.wizard.next();
  },
  stepHandler,
  // ctx => {
  //   ctx.reply('Step 3');
  //   return ctx.wizard.next();
  // },
  // ctx => {
  //   ctx.reply('Step 4');
  //   return ctx.wizard.next();
  // },
  ctx => {
    ctx.reply('–û–ø—è—Ç—å –Ω–∞–ø–∏–ª—Å—è, –º—Ä–∞–∑—å?');
    return ctx.scene.leave();
  }
);

const bot = new Telegraf(process.env.BOT_TOKEN);
const stage = new Stage([superWizard], { default: 'super-wizard' });
bot.use(session());
bot.use(stage.middleware());
bot.launch();
